// Telegram bot with Google Sheets integration
const TelegramBot = require('node-telegram-bot-api');
const dotenv = require('dotenv');
const { v4: uuidv4 } = require('uuid');
const sheetsService = require('./googleSheetsService.cjs');

// Load environment variables
dotenv.config();

// Replace with your Telegram bot token
const token = process.env.TELEGRAM_BOT_TOKEN;

if (!token) {
  console.error('TELEGRAM_BOT_TOKEN is not set. Please set it in your .env file.');
  process.exit(1);
}

// Create a bot instance
const bot = new TelegramBot(token, { polling: true });

// In-memory user database for active registration sessions
const registrationStates = {};

// User class
class User {
  constructor(telegramId, name, skills, pastProjects, bio, lookingForSkills, projectIdea, location) {
    this.id = uuidv4();
    this.telegramId = telegramId;
    this.name = name;
    this.skills = skills;
    this.pastProjects = pastProjects;
    this.bio = bio;
    this.lookingForSkills = lookingForSkills;
    this.projectIdea = projectIdea;
    this.location = location;
  }
}

// Handle /start command
bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from?.id;

  if (!userId) {
    bot.sendMessage(chatId, 'Hata: KullanÄ±cÄ± tanÄ±mlanamadÄ±.');
    return;
  }

  // Welcome message
  bot.sendMessage(
    chatId,
    `Proje TakÄ±m EÅŸleÅŸtirme Botuna HoÅŸ Geldiniz! ğŸ‘‹\n\n` +
    `Grup projeleriniz iÃ§in tamamlayÄ±cÄ± becerilere sahip takÄ±m arkadaÅŸlarÄ± bulmanÄ±za yardÄ±mcÄ± olmak iÃ§in buradayÄ±m. Ä°ÅŸte yapabilecekleriniz:\n\n` +
    `- /kayit - Becerileriniz ve ilgi alanlarÄ±nÄ±zla profilinizi oluÅŸturun veya gÃ¼ncelleyin\n` +
    `- /profil - Profilinizi gÃ¶rÃ¼ntÃ¼leyin\n` +
    `- /eslesme - TamamlayÄ±cÄ± becerilere sahip potansiyel takÄ±m Ã¼yelerini bulun\n` +
    `- /yardim - Botun kullanÄ±mÄ± hakkÄ±nda yardÄ±m alÄ±n\n\n` +
    `Hadi baÅŸlayalÄ±m! Profilinizi oluÅŸturmak iÃ§in /kayit komutunu kullanÄ±n.`
  );
});

// Handle /kayit and /register commands
bot.onText(/\/(kayit|register)/, async (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from?.id;

  if (!userId) {
    bot.sendMessage(chatId, 'Hata: KullanÄ±cÄ± tanÄ±mlanamadÄ±.');
    return;
  }

  // Check if user already exists in Google Sheets
  const userExists = await sheetsService.checkUserExists(userId);
  if (userExists) {
    bot.sendMessage(chatId, 'Zaten kayÄ±tlÄ±sÄ±nÄ±z. Profilinizi gÃ¶rÃ¼ntÃ¼lemek iÃ§in /profil komutunu kullanabilirsiniz.');
    return;
  }

  // Start the registration process
  registrationStates[userId] = {
    step: 'name',
    data: { telegramId: userId }
  };

  bot.sendMessage(chatId, "Proje takÄ±m eÅŸleÅŸtirmesi iÃ§in kayÄ±t iÅŸlemine baÅŸlayalÄ±m! AdÄ±nÄ±z nedir?");
});

// Handle /profil and /profile commands
bot.onText(/\/(profil|profile)/, async (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from?.id;

  if (!userId) {
    bot.sendMessage(chatId, 'Hata: KullanÄ±cÄ± tanÄ±mlanamadÄ±.');
    return;
  }

  // Get user from Google Sheets
  const user = await sheetsService.getUserByTelegramId(userId);
  if (!user) {
    bot.sendMessage(chatId, "HenÃ¼z bir profiliniz yok. OluÅŸturmak iÃ§in /kayit komutunu kullanÄ±n.");
    return;
  }

  // Format profile message
  let profileMessage = `ğŸ“‹ Profiliniz:\n\n` +
    `Ad: ${user.name}\n` +
    `Beceriler: ${user.skills.join(', ')}\n` +
    `GeÃ§miÅŸ Projeler: ${user.pastProjects.join(', ')}\n` +
    `HakkÄ±nda: ${user.bio}\n` +
    `AradÄ±ÄŸÄ±nÄ±z beceriler: ${user.lookingForSkills.join(', ')}\n` +
    `Proje fikri: ${user.projectIdea || 'BelirtilmemiÅŸ'}\n` +
    `Konum: ${user.location || 'BelirtilmemiÅŸ'}\n\n`;

  bot.sendMessage(chatId, profileMessage);
});

// Handle /eslesme and /matches commands
bot.onText(/\/(eslesme|matches)/, async (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from?.id;

  if (!userId) {
    bot.sendMessage(chatId, 'Hata: KullanÄ±cÄ± tanÄ±mlanamadÄ±.');
    return;
  }

  // Get user from Google Sheets
  const user = await sheetsService.getUserByTelegramId(userId);
  if (!user) {
    bot.sendMessage(chatId, "HenÃ¼z bir profiliniz yok. OluÅŸturmak iÃ§in /kayit komutunu kullanÄ±n.");
    return;
  }

  // Get all users from Google Sheets
  const allUsers = await sheetsService.getAllUsers();
  if (!allUsers || allUsers.length === 0) {
    bot.sendMessage(chatId, "HenÃ¼z sistemde baÅŸka kullanÄ±cÄ± bulunmuyor.");
    return;
  }

  // Get all potential matches (excluding the user themselves)
  const allPotentialUsers = allUsers.filter(u => {
    // Skip the user themselves
    return u.telegramId !== user.telegramId;
  });

  if (allPotentialUsers.length === 0) {
    bot.sendMessage(chatId, "HenÃ¼z sistemde baÅŸka kullanÄ±cÄ± bulunmuyor. Daha sonra tekrar deneyin.");
    return;
  }

  // Calculate match scores for all potential users
  const scoredMatches = allPotentialUsers.map(u => {
    let matchScore = 0;

    // Check if the other user has skills that this user is looking for
    const skillsUserWants = user.lookingForSkills.filter(skill =>
      u.skills.some(uSkill => uSkill.toLowerCase().includes(skill.toLowerCase()))
    );

    if (skillsUserWants.length > 0) {
      matchScore += skillsUserWants.length * 2; // Higher weight for matching skills
    }

    // Check if this user has skills that the other user is looking for
    const skillsOtherWants = u.lookingForSkills.filter(skill =>
      user.skills.some(userSkill => userSkill.toLowerCase().includes(skill.toLowerCase()))
    );

    if (skillsOtherWants.length > 0) {
      matchScore += skillsOtherWants.length * 2;
    }

    return {
      user: u,
      score: matchScore
    };
  });

  // Sort by match score (highest first)
  scoredMatches.sort((a, b) => b.score - a.score);

  // Extract just the users from the scored matches
  const potentialMatches = scoredMatches.map(match => match.user);

  // Show the first potential match
  const match = potentialMatches[0];

  // Format match message
  const matchMessage = `Potansiyel bir takÄ±m Ã¼yesi bulundu!\n\n` +
    `Ad: ${match.name}\n` +
    `Beceriler: ${match.skills.join(', ')}\n` +
    `GeÃ§miÅŸ Projeler: ${match.pastProjects.join(', ')}\n` +
    `HakkÄ±nda: ${match.bio}\n` +
    `Proje fikri: ${match.projectIdea || 'BelirtilmemiÅŸ'}\n` +
    `Konum: ${match.location || 'BelirtilmemiÅŸ'}\n\n` +
    `Bu kiÅŸiyle iletiÅŸime geÃ§mek iÃ§in Telegram'da t.me/${match.telegramId} adresini kullanabilirsiniz.`;

  bot.sendMessage(chatId, matchMessage);
});

// Handle /guncelle and /update commands
bot.onText(/\/(guncelle|update)/, async (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from?.id;

  if (!userId) {
    bot.sendMessage(chatId, 'Hata: KullanÄ±cÄ± tanÄ±mlanamadÄ±.');
    return;
  }

  // Get user from Google Sheets
  const user = await sheetsService.getUserByTelegramId(userId);
  if (!user) {
    bot.sendMessage(chatId, "HenÃ¼z bir profiliniz yok. OluÅŸturmak iÃ§in /kayit komutunu kullanÄ±n.");
    return;
  }

  // Start the update process
  const updateOptions = {
    reply_markup: {
      inline_keyboard: [
        [{ text: 'Beceriler', callback_data: 'update_skills' }],
        [{ text: 'GeÃ§miÅŸ Projeler', callback_data: 'update_projects' }],
        [{ text: 'Biyografi', callback_data: 'update_bio' }],
        [{ text: 'AradÄ±ÄŸÄ±m Beceriler', callback_data: 'update_lookingfor' }],
        [{ text: 'Proje Fikri', callback_data: 'update_idea' }],
        [{ text: 'Konum', callback_data: 'update_location' }]
      ]
    }
  };

  bot.sendMessage(chatId, "Hangi bilgiyi gÃ¼ncellemek istiyorsunuz?", updateOptions);
});

// Handle callback queries for profile updates
bot.on('callback_query', async (callbackQuery) => {
  const userId = callbackQuery.from.id;
  const chatId = callbackQuery.message.chat.id;
  const data = callbackQuery.data;

  // Check if this is an update request
  if (data.startsWith('update_')) {
    const updateType = data.replace('update_', '');

    // Create a temporary state for the update
    if (!registrationStates[userId]) {
      registrationStates[userId] = {
        step: updateType,
        data: { telegramId: userId, isUpdating: true }
      };
    }

    let promptMessage = '';

    switch (updateType) {
      case 'skills':
        promptMessage = "Teknik becerilerinizi gÃ¼ncelleyin (virgÃ¼lle ayrÄ±lmÄ±ÅŸ liste, Ã¶rn., JavaScript, React, Node.js, UI/UX TasarÄ±m, Proje YÃ¶netimi):";
        break;
      case 'projects':
        promptMessage = "GeÃ§miÅŸ projelerinizi gÃ¼ncelleyin (virgÃ¼lle ayrÄ±lmÄ±ÅŸ liste):";
        break;
      case 'bio':
        promptMessage = "Biyografinizi gÃ¼ncelleyin:";
        break;
      case 'lookingfor':
        promptMessage = "AradÄ±ÄŸÄ±nÄ±z becerileri gÃ¼ncelleyin (virgÃ¼lle ayrÄ±lmÄ±ÅŸ liste):";
        break;
      case 'idea':
        promptMessage = "Proje fikrinizi gÃ¼ncelleyin:";
        break;
      case 'location':
        promptMessage = "Konumunuzu gÃ¼ncelleyin (ÅŸehir/Ã¼lke):";
        break;
      default:
        promptMessage = "GeÃ§ersiz gÃ¼ncelleme tipi.";
    }

    bot.sendMessage(chatId, promptMessage);
    bot.answerCallbackQuery(callbackQuery.id);
  }
});

// Handle /yardim and /help commands
bot.onText(/\/(yardim|help)/, (msg) => {
  const chatId = msg.chat.id;

  bot.sendMessage(
    chatId,
    `Proje TakÄ±m EÅŸleÅŸtirme Botunu nasÄ±l kullanacaÄŸÄ±nÄ±z:\n\n` +
    `- /kayit - Becerilerinizi ve ilgi alanlarÄ±nÄ±zÄ± eklemek iÃ§in kayÄ±t iÅŸlemini baÅŸlatÄ±n\n` +
    `- /profil - Mevcut profilinizi gÃ¶rÃ¼ntÃ¼leyin\n` +
    `- /eslesme - TamamlayÄ±cÄ± becerilere sahip potansiyel takÄ±m Ã¼yelerini bulun\n` +
    `- /guncelle - Profilinizi gÃ¼ncelleyin\n` +
    `- /yardim - Bu yardÄ±m mesajÄ±nÄ± gÃ¶sterin\n\n` +
    `Botla etkileÅŸim kurmak iÃ§in, mesajlarÄ±na yanÄ±t vermeniz yeterlidir. KayÄ±t sÄ±rasÄ±nda, bot sizi adÄ±m adÄ±m yÃ¶nlendirecektir.\n\n` +
    `Potansiyel takÄ±m Ã¼yelerini gÃ¶rÃ¼ntÃ¼lerken, becerilerine ve proje fikirlerine gÃ¶re onlarla iletiÅŸime geÃ§ebilirsiniz.`
  );
});

// Handle regular messages (for registration and update processes)
bot.on('message', async (msg) => {
  // Skip command messages
  if (msg.text?.startsWith('/')) return;

  const chatId = msg.chat.id;
  const userId = msg.from?.id;
  const text = msg.text || '';

  if (!userId) {
    bot.sendMessage(chatId, 'Hata: KullanÄ±cÄ± tanÄ±mlanamadÄ±.');
    return;
  }

  // Check if user is in registration or update process
  const registrationState = registrationStates[userId];
  if (!registrationState) return;

  // Check if this is an update process
  const isUpdating = registrationState.data.isUpdating;

  if (isUpdating) {
    // Handle profile update
    try {
      // Get current user data
      const currentUser = await sheetsService.getUserByTelegramId(userId);
      if (!currentUser) {
        bot.sendMessage(chatId, "Profiliniz bulunamadÄ±. LÃ¼tfen Ã¶nce /kayit komutunu kullanÄ±n.");
        delete registrationStates[userId];
        return;
      }

      // Create updated user object
      const updatedUser = { ...currentUser };

      // Update the specific field
      switch (registrationState.step) {
        case 'skills':
          updatedUser.skills = text.split(',').map(i => i.trim()).filter(i => i.length > 0);
          bot.sendMessage(chatId, "Becerileriniz baÅŸarÄ±yla gÃ¼ncellendi!");
          break;

        case 'projects':
          updatedUser.pastProjects = text.split(',').map(i => i.trim()).filter(i => i.length > 0);
          bot.sendMessage(chatId, "GeÃ§miÅŸ projeleriniz baÅŸarÄ±yla gÃ¼ncellendi!");
          break;

        case 'bio':
          updatedUser.bio = text.trim();
          bot.sendMessage(chatId, "Biyografiniz baÅŸarÄ±yla gÃ¼ncellendi!");
          break;

        case 'lookingfor':
          updatedUser.lookingForSkills = text.split(',').map(i => i.trim()).filter(i => i.length > 0);
          bot.sendMessage(chatId, "AradÄ±ÄŸÄ±nÄ±z beceriler baÅŸarÄ±yla gÃ¼ncellendi!");
          break;

        case 'idea':
          updatedUser.projectIdea = text.trim();
          bot.sendMessage(chatId, "Proje fikriniz baÅŸarÄ±yla gÃ¼ncellendi!");
          break;

        case 'location':
          updatedUser.location = text.trim();
          bot.sendMessage(chatId, "Konumunuz baÅŸarÄ±yla gÃ¼ncellendi!");
          break;

        default:
          bot.sendMessage(chatId, "GeÃ§ersiz gÃ¼ncelleme tipi.");
      }

      // Save updated user to Google Sheets
      const success = await sheetsService.updateUserInSheet(updatedUser);
      if (success) {
        bot.sendMessage(chatId, "Profiliniz baÅŸarÄ±yla gÃ¼ncellendi. GÃ¼ncel profilinizi gÃ¶rmek iÃ§in /profil komutunu kullanabilirsiniz.");
      } else {
        bot.sendMessage(chatId, "Profil gÃ¼ncellenirken bir hata oluÅŸtu. LÃ¼tfen daha sonra tekrar deneyin.");
      }

      // Update complete
      delete registrationStates[userId];
    } catch (error) {
      console.error('Profil gÃ¼ncelleme hatasÄ±:', error);
      bot.sendMessage(chatId, "Profil gÃ¼ncellenirken bir hata oluÅŸtu. LÃ¼tfen daha sonra tekrar deneyin.");
      delete registrationStates[userId];
    }
  } else {
    // Process the current registration step
    switch (registrationState.step) {
      case 'name':
        registrationState.data.name = text.trim();
        registrationState.step = 'skills';
        bot.sendMessage(chatId, "Harika! Teknik becerileriniz nelerdir? (virgÃ¼lle ayrÄ±lmÄ±ÅŸ liste, Ã¶rn., JavaScript, React, Node.js, UI/UX TasarÄ±m, Proje YÃ¶netimi)");
        break;

      case 'skills':
        registrationState.data.skills = text.split(',').map(i => i.trim()).filter(i => i.length > 0);
        registrationState.step = 'pastProjects';
        bot.sendMessage(chatId, "GeÃ§miÅŸte hangi projelerde Ã§alÄ±ÅŸtÄ±nÄ±z? (virgÃ¼lle ayrÄ±lmÄ±ÅŸ liste)");
        break;

      case 'pastProjects':
        registrationState.data.pastProjects = text.split(',').map(i => i.trim()).filter(i => i.length > 0);
        registrationState.step = 'bio';
        bot.sendMessage(chatId, "Kendiniz ve deneyiminiz hakkÄ±nda biraz bilgi verin (biyografiniz):");
        break;

      case 'bio':
        registrationState.data.bio = text.trim();
        registrationState.step = 'lookingForSkills';
        bot.sendMessage(chatId, "Potansiyel takÄ±m Ã¼yelerinde hangi becerileri arÄ±yorsunuz? (virgÃ¼lle ayrÄ±lmÄ±ÅŸ liste)");
        break;

      case 'lookingForSkills':
        registrationState.data.lookingForSkills = text.split(',').map(i => i.trim()).filter(i => i.length > 0);
        registrationState.step = 'projectIdea';
        bot.sendMessage(chatId, "Ãœzerinde Ã§alÄ±ÅŸmak istediÄŸiniz bir proje fikriniz var mÄ±? LÃ¼tfen kÄ±saca aÃ§Ä±klayÄ±n:");
        break;

      case 'projectIdea':
        registrationState.data.projectIdea = text.trim();
        registrationState.step = 'location';
        bot.sendMessage(chatId, "Konumunuz nedir? (ÅŸehir/Ã¼lke)");
        break;

      case 'location':
        registrationState.data.location = text.trim();

        // Create the user
        const { telegramId, name, skills, pastProjects, bio, lookingForSkills, projectIdea, location } = registrationState.data;
        const newUser = new User(telegramId, name, skills, pastProjects, bio, lookingForSkills, projectIdea, location);

        // Save the user to Google Sheets
        try {
          const success = await sheetsService.addUserToSheet(newUser);
          if (success) {
            bot.sendMessage(chatId, "KayÄ±t tamamlandÄ±! Bilgileriniz baÅŸarÄ±yla kaydedildi. Projeleriniz iÃ§in potansiyel takÄ±m Ã¼yeleriyle eÅŸleÅŸmeye baÅŸlayabilirsiniz. TakÄ±m Ã¼yeleri bulmak iÃ§in /eslesme komutunu kullanÄ±n.");
          } else {
            bot.sendMessage(chatId, "KayÄ±t sÄ±rasÄ±nda bir hata oluÅŸtu. LÃ¼tfen daha sonra tekrar deneyin.");
          }
        } catch (error) {
          console.error('KullanÄ±cÄ± kaydÄ± sÄ±rasÄ±nda hata:', error);
          bot.sendMessage(chatId, "KayÄ±t sÄ±rasÄ±nda bir hata oluÅŸtu. LÃ¼tfen daha sonra tekrar deneyin.");
        }

        // Registration complete
        delete registrationStates[userId];
        break;

      default:
        bot.sendMessage(chatId, "GeÃ§ersiz kayÄ±t adÄ±mÄ±. LÃ¼tfen tekrar baÅŸlamak iÃ§in /kayit komutunu kullanÄ±n.");
        delete registrationStates[userId];
    }
  }
});

// Start the bot
console.log('Telegram botu Ã§alÄ±ÅŸÄ±yor...');
console.log('Botu durdurmak iÃ§in Ctrl+C tuÅŸlarÄ±na basÄ±n');
